{"version":3,"sources":["script.min.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_toConsumableArray","arr","Array","isArray","arr2","from","document","getElementById","games","gamez","displayMatches","wordToMatch","html","this","value","filter","item","regex","RegExp","name","match","map","join","suggestions","innerHTML","fetch","then","blob","json","data","push","apply","forEach","game","searchInput","querySelector","addEventListener"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEA,SAASK,EAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,IAAIf,EAAI,EAAGkB,EAAOF,MAAMD,EAAIJ,QAASX,EAAIe,EAAIJ,OAAQX,IAAOkB,EAAKlB,GAAKe,EAAIf,GAAM,OAAOkB,EAAe,OAAOF,MAAMG,KAAKJ,GAMhLK,SAASC,eAAe,OAClBD,SAASC,eAAe,aACvBD,SAASC,eAAe,cACzBD,SAASC,eAAe,aACvBD,SAASC,eAAe,cACrBD,SAASC,eAAe,iBAL5C,IAOIC,EAAQ,GA0ERC,EAAQ,GAmBZ,SAASC,IACL,IARiBC,EASbC,GATaD,EAQYE,KAAKC,MAAOL,EAP5BM,OAAO,SAAUC,GAC1B,IAAIC,EAAQ,IAAIC,OAAOP,EAAa,MACpC,OAAOK,EAAKG,KAAKC,MAAMH,MAMLI,IAAI,SAAUL,GAChC,MAAO,+BAAiCA,EAAKG,KAAO,8BACrDG,KAAK,IACRC,EAAYC,UAAYZ,EAtB5Ba,MArEe,2CAqECC,KAAK,SAAUC,GAC3B,OAAOA,EAAKC,SACbF,KAAK,SAAUG,GACd,OAAOpB,EAAMqB,KAAKC,MAAMtB,EAAOT,EAAmB6B,MAGtDpB,EAAMuB,QAAQ,SAAUC,GACpBzB,EAAMsB,KAAKG,EAAKd,QAkBpB,IAAIe,EAAc5B,SAAS6B,cAAc,eACrCZ,EAAcjB,SAAS6B,cAAc,gBAEzCD,EAAYE,iBAAiB,SAAU1B,GACvCwB,EAAYE,iBAAiB,QAAS1B,IAyCpC,KAAK,GAAG,CAAC","file":"script.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/*****************************************************************************/\n/*                            VARIABLES                                      */\n/*****************************************************************************/\n\nvar app = document.getElementById(\"app\");\nvar gamesList = document.getElementById(\"gamesList\");\nvar genresList = document.getElementById(\"genresList\");\nvar idealList = document.getElementById(\"idealList\");\nvar playerList = document.getElementById(\"playerList\");\nvar mechanicsList = document.getElementById(\"mechanicsList\");\n\nvar games = [];\nvar genres = [];\nvar ideal = [];\nvar players = [];\nvar mechanics = [];\nvar difficulty = [];\nvar gameArr = [];\nvar endpoint = \"https://www.darrencarlin.com/games.json\";\n\n/*****************************************************************************/\n/*                            FUNCTIONS                                      */\n/*****************************************************************************/\n\n// Flatten / De-duplicate Arrays.\n\nvar flattenSort = function flattenSort(arr) {\n    return [].concat(_toConsumableArray(new Set(arr.reduce(function (a, b) {\n        return a.concat(b);\n    }, []))));\n};\n\n// Find max player Count off all games.\n\nvar findMax = function findMax(arr) {\n    return [Math.max.apply(Math, _toConsumableArray(arr))];\n};\n\n// Remove empty strings from Array \n\nvar removeEmpty = function removeEmpty(arr) {\n    arr.filter(function (str) {\n        return str.trim() != '';\n    });\n};\n\n// Create and populate options for select menus.\n// *numberedList is used for player 2 - 'max player' \n\nvar populateOption = function populateOption(jsArr, htmlEl) {\n    var numberedList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n\n    if (numberedList) {\n        for (var i = 2; i <= jsArr; i++) {\n            htmlEl.innerHTML += \"<option value=\\\"\" + i + \"\\\"> \" + i + \" </option>\";\n        }\n    } else {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = jsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _i = _step.value;\n\n                htmlEl.innerHTML += \"<option value=\\\"\" + _i + \"\\\"> \" + _i + \" </option>\";\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n};\n\nvar gamez = [];\n\nfetch(endpoint).then(function (blob) {\n    return blob.json();\n}).then(function (data) {\n    return gamez.push.apply(gamez, _toConsumableArray(data));\n});\n\ngamez.forEach(function (game) {\n    games.push(game.name);\n});\n\nfunction findMatches(wordToMatch, gamez) {\n    return gamez.filter(function (item) {\n        var regex = new RegExp(wordToMatch, 'gi');\n        return item.name.match(regex);\n    });\n}\n\nfunction displayMatches() {\n    var matchArray = findMatches(this.value, gamez);\n    var html = matchArray.map(function (item) {\n        return \"\\n        <li>\\n            \" + item.name + \"\\n        </li>\\n        \";\n    }).join('');\n    suggestions.innerHTML = html;\n}\n\nvar searchInput = document.querySelector('.search-bar');\nvar suggestions = document.querySelector('.suggestions');\n\nsearchInput.addEventListener('change', displayMatches);\nsearchInput.addEventListener('keyup', displayMatches);\n\n// // AJAX Call \n// let gamez = [];\n// fetch(endpoint)\n//     .then(response => response.json())\n//     //  .then(jsonData => gamez.push(...jsonData))\n//     .then(data => data.forEach((game, index) => {\n\n//         gameArr.push(game); // Storing entire JSON data.\n\n//         games.push(game.name); // Storing Names\n\n//         genres.push(game.genre); // Storing Genres\n//         genres = (flattenSort(genres));\n\n//         ideal.push(game.idealFor); // Storing Ideal For\n//         ideal = flattenSort(ideal);\n\n//         players.push(game.players.playersMax); // Storing Max Players\n//         players = findMax(players);\n\n//         mechanics.push(game.mechanics); // Storing Mechanics\n//         mechanics = flattenSort(mechanics);\n\n//         difficulty.push(game.difficulty); // Storing Difficulty \n//         difficulty = flattenSort(difficulty);\n\n//         populateOption(games, gamesList);\n//         populateOption(genres, genresList);\n//         populateOption(ideal, idealList);\n//         populateOption(mechanics, mechanicsList);\n//         populateOption(difficulty, difficultyList);\n//         populateOption(players, playerList, true);\n\n\n//     }))\n//     .catch(function (error) {\n//         console.log(error);\n//     });\n\n},{}]},{},[1]);\n"]}